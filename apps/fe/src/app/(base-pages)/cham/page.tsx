'use client';
import React, { useState } from 'react';
import AppSection from '@/components/shared/app-section/AppSection';
import PageHeader from '@/components/shared/page-header/PageHeader';
import EmotionWheel from '@/components/newcham/EmotionWheel';
import EmotionDetail from '@/components/newcham/EmotionDetail';
import SelectedEmotionTags from '@/components/newcham/SelectedEmotionTags';
import ButtonCTA from '@/components/shared/cta/ButtonCTA';
import { NewMoodService } from '@/services/api/newmood/mood.service';
import { Save } from 'lucide-react';
import Swal from 'sweetalert2';

function NewChamPage() {
	const [selectedEmotion, setSelectedEmotion] = useState<string | null>(null);
	const [selectedTagIds, setSelectedTagIds] = useState<string[]>([]);
	const [saveStatus, setSaveStatus] = useState<'normal' | 'loading' | 'disabled'>('normal');

	const moodService = NewMoodService.getInstance();

	const handleTagToggle = (tagId: string) => {
		setSelectedTagIds((prev) => (prev.includes(tagId) ? prev.filter((id) => id !== tagId) : [...prev, tagId]));
	};

	const handleRemoveTag = (tagId: string) => {
		setSelectedTagIds((prev) => prev.filter((id) => id !== tagId));
	};

	const handleSubmit = async () => {
		if (selectedTagIds.length === 0) {
			Swal.fire({
				icon: 'warning',
				title: 'Ch∆∞a ch·ªçn c·∫£m x√∫c',
				text: 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c·∫£m x√∫c tr∆∞·ªõc khi l∆∞u',
			});
			return;
		}

		setSaveStatus('loading');

		const [error, success] = await moodService.saveSelectedEmotions(selectedTagIds);

		setSaveStatus('normal');

		if (error) {
			Swal.fire({
				icon: 'error',
				title: 'C√≥ l·ªói x·∫£y ra',
				text: 'Kh√¥ng th·ªÉ l∆∞u c·∫£m x√∫c c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.',
			});
			return;
		}

		Swal.fire({
			icon: 'success',
			title: 'ƒê√£ l∆∞u th√†nh c√¥ng!',
			text: `ƒê√£ l∆∞u ${selectedTagIds.length} c·∫£m x√∫c c·ªßa b·∫°n`,
			timer: 2000,
		});

		setSelectedTagIds([]);
		setSelectedEmotion(null);
	};

	return (
		<>
			<PageHeader title='B·∫°n ƒëang c·∫£m th·∫•y th·∫ø n√†o?' description='Ch·ªçn c·∫£m x√∫c ch√≠nh ƒë·ªÉ kh√°m ph√° chi ti·∫øt' disableAppearAnimation />

			{selectedEmotion && <EmotionDetail selectedEmotion={selectedEmotion} selectedTagIds={selectedTagIds} onTagToggle={handleTagToggle} />}

			<AppSection disableAppearAnimation>
				<EmotionWheel selectedEmotion={selectedEmotion} onEmotionSelect={setSelectedEmotion} />
			</AppSection>

			{selectedTagIds.length > 0 && (
				<AppSection>
					<SelectedEmotionTags selectedTagIds={selectedTagIds} onRemoveTag={handleRemoveTag} />
				</AppSection>
			)}

			{selectedTagIds.length > 0 && (
				<AppSection>
					<div className='flex justify-center'>
						<ButtonCTA variant='primary' status={saveStatus} onClick={handleSubmit} Icon={Save} className='px-8 py-3 text-lg'>
							L∆∞u c·∫£m x√∫c ({selectedTagIds.length})
						</ButtonCTA>
					</div>
				</AppSection>
			)}

			{!selectedEmotion && selectedTagIds.length === 0 && (
				<AppSection>
					<div className='bg-white rounded-3xl shadow-lg p-8 text-center'>
						<div className='text-4xl mb-3'>üëÜ</div>
						<p className='text-lg text-[var(--color-text-secondary)]'>Ch·ªçn m·ªôt c·∫£m x√∫c ·ªü tr√™n ƒë·ªÉ xem chi ti·∫øt</p>
					</div>
				</AppSection>
			)}
		</>
	);
}

export default NewChamPage;
